scalar UUID
scalar JSON
scalar Date
scalar Void

type Mutation {
  createOwnedBook(input: CreateOwnedBookInput): OwnedBook
  updateOwnedBook(id: String, userId: String): OwnedBook
  deleteOwnedBook(id: String!): Void
  createTrade(bookIds: [String], userId: String): CreateTradeResult
  updateTrade(id: String, status: Int): Trade
  createUser(id: String, fullName: String, location: String): User
  updateUser(id: String, fullName: String, location: String): User
}

input CreateOwnedBookInput {
  bookId: String
  userId: String
  title: String
  author: String
  imageUrl: String
  publicationYear: Int
  available: Boolean
}

type CreateTradeResult {
  trade: Trade
  tradeBooks: [TradeBook]
}

type OwnedBook {
  id: UUID
  bookId: String
  userId: String
  trades(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [Trade]
  user: User
  title: String
  author: String
  imageUrl: String
  publicationYear: Int
  available: Boolean
  requestCount: Int
}

type Query {
  ownedBooks(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [OwnedBook]

  ownedBook(
    id: String
  ): OwnedBook

  trades(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [Trade]

  trade(
    bookId: String
    userId: String
  ): Trade

  users(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [User]

  user(
    id: String
  ): User

  goodreads(
    q: String
    field: String
    userId: String
  ): [Book]
}

type Book {
  id: String
  title: String
  author: String
  imageUrl: String
  publicationYear: Int
  userId: String
}

type Trade {
  id: String!
  userId: String
  status: Int
  createdAt: Date
  updatedAt: Date
  user: User
  tradeBooks: [TradeBook]
}

type TradeBook {
  id: String!
  tradeId: String
  bookId: String
  trade: Trade
  ownedBook: OwnedBook
}

type User {
  id: String!
  name: String
  location: String
  email: String
  ownedBooks(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [OwnedBook]
}
