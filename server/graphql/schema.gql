scalar JSON
scalar Date
scalar Void

type Mutation {
  createOwnedBook(id: String, userId: String): OwnedBook
  updateOwnedBook(id: String, userId: String): OwnedBook
  deleteOwnedBook(id: String!): String
  createRequestedBook(bookId: String, userId: String): RequestedBook
  deleteRequestedBook(bookId: String!, userId: String!): String
  createTrade(bookId: String, userId: String): Trade
  deleteTrade(bookId: String!, userId: String!): Trade
  createUser(id: String, fullName: String, location: String): User
  updateUser(id: String, fullName: String, location: String): User
}

type OwnedBook {
  id: String!
  userId: String
  trades(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [Trade]
  user: User
}

type Query {
  ownedBooks(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [OwnedBook]

  ownedBook(
    id: String
  ): OwnedBook

  requestedBooks(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [RequestedBook]

  requestedBook(
    bookId: String
    userId: String
  ): RequestedBook

  trades(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [Trade]

  trade(
    bookId: String
    userId: String
  ): Trade

  users(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [User]

  user(
    id: String
  ): User
}

type RequestedBook {
  id: String!
  userId: String
  user: User
}

type Trade {
  bookId: String!
  userId: String!
  ownedBook: OwnedBook
}

type User {
  id: String!
  fullName: String
  location: String

  ownedBooks(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [OwnedBook]

  requestedBooks(
    limit: Int
    order: String
    where: JSON
    offset: Int
  ): [RequestedBook]
}
